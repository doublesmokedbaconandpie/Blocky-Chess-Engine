#pragma once

#include "move.hpp"
#include "types.hpp"

namespace Eval {

constexpr int totalPhase = 24;

struct Info {
    Info() = default;
    int getRawEval() const;
    void addPiece(Square square, pieceTypes piece);
    void removePiece(Square square, pieceTypes piece);

    int opScore = 0;
    int egScore = 0;
    int phase = 0;
};

int getPiecePhase(pieceTypes piece);
int getPlacementScoreOp(Square square, pieceTypes currPiece);
int getPlacementScoreEg(Square square, pieceTypes currPiece);

constexpr std::array<int, NUM_PIECES> pieceValsOp = {0, 745, 272, 337, 349, 54};
constexpr std::array<int, NUM_PIECES> pieceValsEg = {0, 866, 288, 313, 505, 128};

constexpr auto tablesOp = [] {
    std::array<std::array<int, BOARD_SIZE>, 6> tables{};

    tables[WKing] = {
    30, -438, 150, -517, 549, -316, -408, -21,
    -190, -16, -51, 437, -259, -139, 104, 237,
    -541, 387, -34, 64, -52, -83, 25, -169,
    -368, -164, -67, 38, 26, -253, -359, -351,
    -347, -226, -213, -38, -241, -170, -162, -21,
    -168, -153, -122, -262, -332, -183, -36, -34,
    69, -130, 5, -66, -76, -75, 40, 109,
    47, 66, 36, -27, 68, -47, 113, 114,
    };

    tables[WQueen] = {
    410, 427, 347, 371, 506, 567, 474, 406,
    346, 329, 360, 369, 343, 516, 351, 444,
    342, 324, 377, 391, 418, 455, 429, 431,
    399, 372, 371, 368, 376, 388, 354, 367,
    379, 344, 350, 379, 348, 354, 373, 365,
    316, 386, 372, 372, 367, 377, 393, 402,
    353, 347, 386, 385, 389, 401, 369, 363,
    330, 296, 359, 383, 371, 250, 259, 309,
    };

    tables[WBishop] = {
    185, 218, 98, 42, 24, 20, -240, 32,
    109, 124, 103, 112, 57, 198, 123, 104,
    114, 147, 145, 165, 210, 295, 160, 168,
    103, 115, 152, 187, 144, 183, 112, 103,
    103, 109, 100, 158, 142, 115, 105, 107,
    109, 114, 110, 126, 106, 130, 109, 119,
    112, 114, 150, 99, 113, 64, 146, 68,
    -12, 38, 88, 55, 38, 77, -123, -47,
    };

    tables[WKnight] = {
    -181, -146, -70, 127, 209, -34, -41, -270,
    -13, 17, 66, 97, 151, 198, -80, 33,
    45, 35, 40, 102, 180, 158, 91, 101,
    17, 34, 67, 81, 57, 117, 38, 91,
    -12, 115, 32, 17, 46, 54, 16, 6,
    -11, 18, 26, 47, 10, 23, 25, -15,
    -63, -40, -20, 5, 0, -33, 71, 17,
    -210, -13, -23, -54, -12, -34, -5, -38,
    };

    tables[WRook] = {
    94, 163, 221, 258, 227, 242, 256, 400,
    116, 151, 175, 215, 212, 299, 283, 250,
    143, 199, 153, 149, 190, 232, 284, 250,
    73, 98, 143, 141, 162, 167, 120, 136,
    25, 132, 95, 107, 124, 99, 149, 102,
    71, 49, 83, 57, 79, 82, 162, 75,
    11, 30, 104, 57, 50, 108, 71, 30,
    78, 86, 96, 99, 104, 103, 9, 84,
    };

    tables[WPawn] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    163, 166, 65, 124, 155, 11, -120, -96,
    -49, 33, 31, 67, 68, 113, 19, 6,
    1, 3, 3, 28, 45, 37, 42, 5,
    -16, 19, -5, 22, 18, 12, 28, 14,
    -19, 15, 1, -2, 10, 3, 90, 42,
    -27, 5, -19, -19, 1, 40, 110, 23,
    0, 0, 0, 0, 0, 0, 0, 0,
    };

    for (int piece = 0; piece < NUM_PIECES; ++piece) {
        for (auto& sqr: tables[piece]) {
            sqr += pieceValsOp[piece];
        }
    }

    return tables;
}();

// Endgame tables

constexpr auto tablesEg = [] {
    std::array<std::array<int, BOARD_SIZE>, 6> tables{};

    tables[WKing] = {
    -290, 372, -145, 319, -318, 170, 1, -92,
    160, 20, -41, -227, 185, 32, 17, -27,
    245, -135, 11, -4, 64, 93, 2, 123,
    88, 116, 79, 41, 28, 120, 161, 149,
    175, 111, 120, 41, 122, 75, 98, 1,
    52, 100, 54, 121, 140, 97, 43, 15,
    -66, 65, 46, 49, 34, 31, -7, -53,
    -73, -45, -25, -34, -108, -21, -65, -97,
    };

    tables[WQueen] = {
    448, 542, 678, 657, 597, 507, 592, 682,
    552, 639, 619, 689, 704, 674, 700, 668,
    560, 615, 613, 640, 716, 739, 738, 643,
    494, 544, 594, 694, 709, 746, 729, 651,
    562, 571, 601, 641, 660, 595, 620, 598,
    559, 488, 539, 519, 559, 556, 542, 500,
    446, 521, 476, 474, 469, 420, 461, 469,
    492, 556, 541, 446, 491, 577, 383, 559,
    };

    tables[WBishop] = {
    110, 45, 158, 187, 176, 177, 175, 69,
    146, 151, 199, 170, 218, 133, 139, 168,
    139, 193, 196, 190, 123, 177, 174, 174,
    185, 202, 185, 174, 209, 145, 170, 183,
    111, 201, 206, 212, 177, 222, 180, 120,
    143, 135, 232, 189, 229, 180, 128, 105,
    95, 135, 94, 164, 165, 195, 137, 13,
    75, 152, 116, 137, 181, 107, 193, 123,
    };

    tables[WKnight] = {
    -40, 116, 115, 27, -32, 103, 60, 203,
    44, 69, 70, 131, -58, 22, 122, 52,
    53, 113, 127, 112, 101, 83, 114, 22,
    96, 91, 144, 152, 155, 111, 149, 74,
    75, 23, 124, 136, 106, 135, 117, 49,
    -20, 63, 76, 112, 124, 98, 90, 25,
    130, -2, 119, 86, 81, 102, 26, 48,
    30, -33, 33, 79, -4, 57, -52, -49,
    };

    tables[WRook] = {
    339, 307, 306, 276, 285, 305, 267, 194,
    349, 332, 344, 312, 314, 284, 272, 292,
    308, 319, 326, 309, 310, 289, 255, 259,
    324, 313, 306, 303, 306, 314, 326, 285,
    314, 289, 303, 300, 263, 278, 241, 272,
    276, 284, 284, 306, 316, 286, 236, 252,
    260, 304, 279, 291, 291, 273, 273, 260,
    264, 278, 286, 300, 291, 275, 326, 198,
    };

    tables[WPawn] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    401, 438, 378, 310, 298, 309, 422, 474,
    265, 212, 225, 165, 183, 57, 230, 204,
    125, 102, 87, 55, 44, 28, 63, 60,
    85, 55, 35, 28, 36, 29, 46, 32,
    70, 54, 35, 46, 55, 50, 25, 11,
    60, 61, 48, 11, 44, 49, 17, 3,
    0, 0, 0, 0, 0, 0, 0, 0,
    };

    for (int piece = 0; piece < NUM_PIECES; ++piece) {
        for (auto& sqr: tables[piece]) {
            sqr += pieceValsEg[piece];
        }
    }

    return tables;
}();

} // namespace eval