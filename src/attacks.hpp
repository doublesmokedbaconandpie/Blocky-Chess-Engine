#include <array>
#include <cstdint>
#include <vector>

#include "types.hpp"

namespace Attacks {
    
struct Magic {
    uint64_t slideMask;
    uint64_t magic;
    int shift;
    int offset;
};

void init();
template <typename Function, size_t SIZE>
void initMagicTable(std::array<Magic, BOARD_SIZE>& table,
                    const std::array<uint64_t, BOARD_SIZE>& magicTable, 
                    std::array<uint64_t, SIZE>& attackTable,
                    Function getAttackMask, bool isBishop);
int getMagicIndex(Magic& entry, uint64_t blockers);

uint64_t getRelevantBlockerMask(int square, bool isBishop);
std::vector<uint64_t> getPossibleBlockers(int square, uint64_t slideMask);

uint64_t rookSlidingAttacks(int square, uint64_t blockers);
uint64_t bishopSlidingAttacks(int square, uint64_t blockers);
uint64_t fillInDir(int square, uint64_t blockers, int x, int y);

extern std::array<Magic, BOARD_SIZE> rookTable;
extern std::array<Magic, BOARD_SIZE> bishopTable;
extern std::array<uint64_t, 102400> rookAttacks;
extern std::array<uint64_t, 5248> bishopAttacks;

// see ../tools/magic.cpp for how these magic numbers were generated
constexpr std::array<uint64_t, BOARD_SIZE> rookMagics{
0x648000e01484c001ull, 0x0040084030002000ull, 0x00800c1000200080ull, 0x2080100004800800ull,
0xc200201012000c08ull, 0x4200089430020015ull, 0x0200110084082200ull, 0x2100044320810002ull,
0x0204800028804000ull, 0x2003002184400102ull, 0xc080802000801000ull, 0x4022001042002048ull,
0xc202800800800400ull, 0x82120004184a0010ull, 0x200c000204100801ull, 0x88a2000c81040246ull,
0x2162888001400020ull, 0x00b0084000c06000ull, 0x0801010040102006ull, 0x200105001000a008ull,
0x000101000800100cull, 0x0001010048060400ull, 0x0412808011004600ull, 0x224002000a80410cull,
0x0000400880008061ull, 0x0440500440022002ull, 0x0400100080802000ull, 0x8021100180080080ull,
0x8114001480580000ull, 0x821e000404002010ull, 0x0200020400100188ull, 0x0202800080006300ull,
0x0000304000800080ull, 0x8000924000802001ull, 0x2015042001004092ull, 0x0001020961001002ull,
0x000200201a000410ull, 0x8042001066004c08ull, 0x1000800200800100ull, 0x2884800044800500ull,
0x000088400a608000ull, 0x900100c000910020ull, 0x0c20003045010020ull, 0x0009002030030008ull,
0x0008080004008080ull, 0x0081000214010008ull, 0x4010020001008080ull, 0x43000591006a0004ull,
0x80190080a20aca00ull, 0x2005200040008880ull, 0x8020413020820200ull, 0x0824820800100180ull,
0x4000080100041100ull, 0x1600040002008080ull, 0x0012090e08100400ull, 0x20020100440c8200ull,
0x000080210200401aull, 0x0a0200d100204082ull, 0x0008200441006811ull, 0x0400100104486101ull,
0x2001000800500403ull, 0x0032001018214c0aull, 0x0901000429820001ull, 0x000221228400c502ull,
};

constexpr std::array<uint64_t, BOARD_SIZE> bishopMagics{
0x0090080c05000984ull, 0x09000025098a0000ull, 0x100000c04c100900ull, 0x8300881801008400ull,
0x0088000000000044ull, 0x1800000040884504ull, 0x80c0820410083280ull, 0x8480800000000048ull,
0x4400500000861000ull, 0x002a820000000081ull, 0x8000010518000400ull, 0x0020001000400040ull,
0x10580a1000040090ull, 0x2000200200010414ull, 0x06081310140c8800ull, 0x0501012200020480ull,
0x0481100004402018ull, 0x00010ca011000004ull, 0x0000480802210000ull, 0x1080046450180020ull,
0x0410860640082401ull, 0x5404081290400200ull, 0x801a000400180004ull, 0x008108408c020000ull,
0x2080c12009100304ull, 0x44c4000010800200ull, 0x0021000004280200ull, 0x8400901000420220ull,
0x0000401840808014ull, 0x000030f820040008ull, 0x4002002000400000ull, 0x0c00000c00000220ull,
0x0000010000000890ull, 0xc40208010082a400ull, 0x1988010c00040001ull, 0x0020008618100000ull,
0x0500010000001080ull, 0x2004000002000068ull, 0x1008082003400088ull, 0x0000140000000022ull,
0x0815a0000a000001ull, 0x0070220002220300ull, 0x8084000418003004ull, 0x8000029001a20102ull,
0x0003b00000002142ull, 0x2010890000021000ull, 0x204000e900022000ull, 0x1044400002700080ull,
0xb404004000098000ull, 0x002003084c041011ull, 0x8802000822010000ull, 0xd402800080400120ull,
0x2800008800000032ull, 0x0c00400008020106ull, 0x0020290460080001ull, 0x0000820010110000ull,
0x004024a000004200ull, 0x0228400200800012ull, 0x8240028a000d0020ull, 0x00c8000a80040000ull,
0x87c0001001000404ull, 0x1004000024000000ull, 0x2010031041000004ull, 0x0000000100024800ull,
};

} // namespace Attacks