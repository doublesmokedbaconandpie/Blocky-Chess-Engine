#pragma once

#include "move.hpp"
#include "types.hpp"

namespace Eval {

constexpr int totalPhase = 24;

struct Info {
    Info() = default;
    int getRawEval() const;
    void addPiece(Square square, pieceTypes piece);
    void removePiece(Square square, pieceTypes piece);

    int opScore = 0;
    int egScore = 0;
    int phase = 0;
};

int getPiecePhase(pieceTypes piece);
int getPlacementScoreOp(Square square, pieceTypes currPiece);
int getPlacementScoreEg(Square square, pieceTypes currPiece);

constexpr std::array<int, NUM_PIECES> pieceValsOp = {0, 646, 240, 290, 326, 40};
constexpr std::array<int, NUM_PIECES> pieceValsEg = {0, 771, 286, 321, 483, 128};

constexpr auto tablesOp = [] {
    std::array<std::array<int, BOARD_SIZE>, 6> tables{};

    tables[WKing] = {
    -7, 172, -191, -237, -20, -233, -622, 81,
    166, 318, -69, -193, -241, -42, -45, -252,
    -486, 258, -48, -12, -49, -174, -139, -129,
    -209, -81, 12, -70, -45, -173, -238, -125,
    -130, 12, -135, -87, -155, -110, -99, 8,
    -69, -73, -89, -117, -210, -93, -20, -41,
    93, -58, 31, -67, -70, -66, 29, 78,
    135, 97, 53, -31, 29, -60, 102, 108,
    };

    tables[WQueen] = {
    359, 424, 291, 471, 563, 695, 595, 385,
    314, 310, 333, 445, 350, 574, 391, 381,
    300, 307, 359, 407, 384, 482, 431, 424,
    356, 292, 327, 386, 420, 416, 376, 360,
    351, 297, 312, 347, 324, 384, 387, 394,
    277, 345, 346, 338, 354, 354, 392, 368,
    327, 317, 340, 370, 359, 368, 380, 287,
    318, 258, 331, 348, 350, 268, 211, 270,
    };

    tables[WBishop] = {
    133, 177, 161, 94, 123, -4, -233, -48,
    92, 137, 98, 165, 35, 176, 58, 56,
    121, 149, 153, 164, 201, 268, 172, 168,
    128, 101, 155, 175, 127, 176, 98, 99,
    44, 119, 83, 132, 136, 89, 104, 81,
    104, 109, 105, 115, 86, 124, 105, 118,
    108, 98, 97, 82, 102, 80, 119, -23,
    -73, 21, 71, 27, 56, 53, -134, -76,
    };

    tables[WKnight] = {
    -190, 157, -115, 101, 217, 30, 9, -309,
    21, 113, 62, 137, -3, 145, -21, 92,
    59, 15, 68, 85, 182, 170, 138, 104,
    50, 19, 108, 89, 76, 106, 69, 121,
    -5, 157, 39, 25, 85, 63, 47, -1,
    11, 33, 40, 50, 2, 34, 59, -26,
    -43, -60, -47, 10, -2, 24, 66, 54,
    -245, -7, -32, 14, 13, -70, -13, 258,
    };

    tables[WRook] = {
    125, 128, 87, 276, 184, 189, 273, 351,
    96, 117, 215, 170, 266, 237, 224, 182,
    99, 122, 158, 95, 76, 232, 286, 204,
    56, 32, 121, 107, 185, 177, 65, 97,
    -96, 71, -20, 43, 79, 124, 74, 52,
    -12, -54, 13, -34, 48, 59, 96, -14,
    -78, -31, 49, 23, -40, 44, 97, 44,
    -4, 9, 23, 25, 58, 42, -71, 24,
    };

    tables[WPawn] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    194, 209, -3, 140, 287, -41, -46, -6,
    -67, 58, 12, 100, 103, -6, 76, -22,
    -27, 4, -5, 18, 39, 39, 7, -14,
    -17, 17, -10, 6, 14, -6, 5, -17,
    -17, 1, 5, -20, 10, 1, 52, 15,
    -20, -7, -24, -37, -7, 24, 65, 2,
    0, 0, 0, 0, 0, 0, 0, 0,
    };

    for (int piece = 0; piece < NUM_PIECES; ++piece) {
        for (auto& sqr: tables[piece]) {
            sqr += pieceValsOp[piece];
        }
    }

    return tables;
}();

// Endgame tables

constexpr auto tablesEg = [] {
    std::array<std::array<int, BOARD_SIZE>, 6> tables{};

    tables[WKing] = {
    -156, -88, 17, 82, -97, 57, 77, -42,
    -62, -19, 51, 74, 116, 23, 58, 119,
    104, 24, 61, 26, 57, 96, 91, 80,
    43, 39, 8, 31, 24, 43, 98, 41,
    15, 2, 41, 35, 59, 31, 47, -3,
    -17, 24, 10, 19, 54, 40, 9, 8,
    -65, 27, -15, 21, 14, 7, -18, -45,
    -43, -48, -31, -26, -76, -15, -67, -99,
    };

    tables[WQueen] = {
    544, 606, 666, 595, 569, 493, 438, 635,
    599, 611, 631, 677, 732, 569, 613, 713,
    594, 615, 674, 643, 709, 717, 716, 701,
    495, 702, 677, 630, 642, 677, 727, 796,
    511, 649, 617, 679, 647, 534, 623, 547,
    596, 536, 576, 547, 563, 573, 569, 598,
    441, 535, 572, 505, 487, 463, 521, 572,
    552, 606, 506, 443, 492, 572, 387, 535,
    };

    tables[WBishop] = {
    180, 59, 157, 133, 123, 156, 158, 161,
    149, 144, 200, 119, 225, 177, 187, 172,
    102, 170, 174, 188, 149, 155, 140, 175,
    173, 174, 176, 181, 208, 161, 193, 157,
    138, 195, 223, 195, 185, 247, 167, 138,
    172, 152, 222, 178, 224, 188, 118, 89,
    128, 128, 119, 176, 163, 145, 149, 108,
    93, 177, 119, 140, 135, 106, 171, 160,
    };

    tables[WKnight] = {
    -136, 31, 108, 138, 56, 105, -5, 129,
    89, 71, 84, 122, 213, 87, 142, 98,
    61, 116, 123, 141, 100, 66, 114, 123,
    71, 112, 117, 141, 151, 106, 129, 83,
    64, 27, 136, 128, 80, 131, 82, 10,
    47, 63, 91, 103, 120, 115, 68, 28,
    20, -10, 175, 93, 105, 57, 39, 6,
    98, -28, 17, 58, -23, 61, -4, -285,
    };

    tables[WRook] = {
    327, 314, 344, 272, 292, 300, 278, 281,
    342, 327, 308, 330, 286, 299, 273, 308,
    312, 347, 309, 326, 354, 295, 262, 303,
    333, 328, 307, 302, 304, 286, 345, 298,
    365, 314, 346, 324, 280, 281, 297, 277,
    344, 359, 319, 336, 325, 293, 292, 311,
    313, 324, 288, 296, 340, 297, 253, 266,
    298, 326, 318, 337, 308, 295, 340, 225,
    };

    tables[WPawn] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    336, 347, 405, 281, 151, 337, 340, 371,
    245, 191, 248, 139, 160, 144, 142, 201,
    146, 87, 110, 62, 42, 41, 98, 89,
    91, 57, 37, 52, 53, 35, 66, 74,
    60, 49, 33, 73, 28, 53, 38, 33,
    44, 56, 46, 65, 32, 35, 42, 32,
    0, 0, 0, 0, 0, 0, 0, 0,
    };

    for (int piece = 0; piece < NUM_PIECES; ++piece) {
        for (auto& sqr: tables[piece]) {
            sqr += pieceValsEg[piece];
        }
    }

    return tables;
}();

} // namespace eval