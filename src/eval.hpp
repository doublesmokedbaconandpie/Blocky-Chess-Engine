#pragma once

#include "move.hpp"
#include "types.hpp"

namespace Eval {

constexpr int totalPhase = 24;

struct Info {
    Info() = default;
    int getRawEval() const;
    void addPiece(Square square, pieceTypes piece);
    void removePiece(Square square, pieceTypes piece);

    int opScore = 0;
    int egScore = 0;
    int phase = 0;
};

int getPiecePhase(pieceTypes piece);
int getPlacementScoreOp(Square square, pieceTypes currPiece);
int getPlacementScoreEg(Square square, pieceTypes currPiece);

constexpr std::array<int, NUM_PIECES> pieceValsOp = {0, 1228, 336, 404, 464, 61};
constexpr std::array<int, NUM_PIECES> pieceValsEg = {0, 354, 202, 218, 324, 106};

constexpr auto tablesOp = [] {
    std::array<std::array<int, BOARD_SIZE>, 6> tables{};

    tables[WKing] = {
    -126, -54, 2, 9, 102, -15, -515, 417,
    -50, -148, -243, -202, 1323, -331, -381, 149,
    -105, -153, -241, -75, -141, -177, -186, -76,
    -201, -77, -128, -45, -62, -136, -125, -89,
    -62, -5, -145, -37, -104, -66, -52, -21,
    -42, -62, -48, -160, -185, -112, -3, -15,
    61, -112, 15, -76, -94, -90, 12, 90,
    21, 51, 15, -66, 34, -78, 81, 82,
    };

    tables[WQueen] = {
    548, 589, 584, 608, 772, 819, 793, 673,
    555, 552, 568, 582, 545, 770, 606, 706,
    558, 547, 594, 608, 677, 742, 686, 684,
    611, 592, 571, 601, 631, 641, 614, 614,
    602, 569, 563, 596, 583, 587, 600, 589,
    533, 606, 601, 598, 598, 611, 625, 634,
    583, 571, 614, 615, 617, 616, 601, 587,
    539, 522, 592, 610, 592, 505, 437, 541,
    };

    tables[WBishop] = {
    181, 175, 101, 73, 18, -25, -283, -74,
    109, 122, 126, 174, 82, 179, 145, 130,
    139, 145, 161, 195, 206, 289, 235, 195,
    121, 126, 157, 193, 158, 197, 130, 122,
    90, 135, 109, 175, 159, 130, 108, 123,
    115, 113, 124, 130, 120, 138, 130, 124,
    126, 127, 138, 112, 123, 89, 156, 62,
    24, 53, 100, 57, 116, 83, -67, -108,
    };

    tables[WKnight] = {
    -278, -177, -68, 33, 82, -33, 1, -286,
    -14, 1, 71, 102, 153, 203, -109, 86,
    48, 34, 70, 88, 178, 144, 85, 73,
    5, 37, 78, 89, 71, 107, 52, 109,
    -1, 99, 39, 18, 48, 64, 27, 18,
    -8, 20, 34, 52, 14, 33, 25, -23,
    -41, -50, -22, 11, 5, -24, 116, 29,
    -150, -11, -33, -51, 4, -39, -10, -30,
    };

    tables[WRook] = {
    117, 197, 252, 269, 258, 271, 188, 307,
    160, 199, 223, 261, 258, 353, 301, 310,
    173, 258, 179, 179, 247, 268, 288, 271,
    124, 123, 161, 199, 190, 207, 127, 164,
    44, 150, 86, 154, 159, 129, 165, 131,
    117, 96, 122, 104, 119, 116, 188, 80,
    31, 80, 158, 91, 79, 144, 96, 48,
    101, 111, 120, 123, 135, 130, 35, 103,
    };

    tables[WPawn] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    320, 335, 137, 136, 276, 21, 8, 124,
    -11, 70, 57, 76, 80, 68, 71, 15,
    2, -0, 6, 24, 44, 19, 35, -5,
    -19, 13, -7, 17, 14, 5, 23, -5,
    -23, 13, 5, -8, 10, -1, 78, 25,
    -28, -2, -20, -28, -4, 38, 95, 3,
    0, 0, 0, 0, 0, 0, 0, 0,
    };

    for (int piece = 0; piece < NUM_PIECES; ++piece) {
        for (auto& sqr: tables[piece]) {
            sqr += pieceValsOp[piece];
        }
    }

    return tables;
}();

// Endgame tables

constexpr auto tablesEg = [] {
    std::array<std::array<int, BOARD_SIZE>, 6> tables{};

    tables[WKing] = {
    -22, 43, 29, 15, -98, 12, 79, -57,
    1, 70, 131, 118, -460, 123, 118, -131,
    18, 39, 109, 49, 93, 57, 80, 51,
    26, 43, 55, 44, 46, 66, 69, 41,
    -10, 10, 48, 38, 58, 40, 39, 17,
    -27, 14, 3, 49, 61, 53, 24, 9,
    -48, 40, -2, 26, 32, 30, 6, -34,
    -44, -41, -13, -10, -69, -1, -39, -62,
    };

    tables[WQueen] = {
    348, 378, 408, 409, 301, 269, 248, 391,
    334, 383, 406, 432, 464, 356, 384, 341,
    312, 371, 373, 402, 393, 371, 396, 338,
    268, 331, 367, 405, 384, 396, 387, 320,
    288, 336, 365, 410, 372, 321, 351, 330,
    320, 235, 269, 247, 289, 262, 279, 226,
    156, 268, 208, 204, 188, 179, 183, 197,
    274, 293, 251, 178, 239, 253, 134, 214,
    };

    tables[WBishop] = {
    104, 49, 95, 138, 121, 166, 142, 136,
    109, 127, 149, 100, 159, 131, 107, 126,
    84, 156, 134, 140, 95, 133, 101, 110,
    120, 145, 129, 125, 153, 101, 129, 120,
    85, 143, 152, 148, 120, 161, 137, 81,
    93, 100, 169, 141, 177, 125, 63, 63,
    60, 82, 72, 118, 112, 123, 83, 37,
    65, 107, 74, 82, 96, 61, 114, 109,
    };

    tables[WKnight] = {
    14, 143, 118, 62, -1, 64, 53, 160,
    53, 61, 60, 105, -66, 26, 110, 24,
    34, 93, 89, 103, 84, 52, 89, 27,
    82, 63, 99, 116, 112, 73, 103, 22,
    38, 41, 87, 110, 76, 97, 61, 3,
    1, 36, 47, 73, 78, 67, 55, 26,
    37, 2, 87, 59, 56, 54, 8, 3,
    -6, -70, 6, 41, -40, 24, -35, -77,
    };

    tables[WRook] = {
    277, 229, 229, 217, 215, 223, 247, 195,
    262, 244, 258, 228, 235, 199, 206, 206,
    244, 228, 250, 240, 224, 211, 216, 214,
    251, 251, 246, 222, 241, 240, 256, 222,
    260, 236, 250, 218, 200, 221, 205, 217,
    204, 202, 214, 229, 228, 214, 182, 216,
    189, 195, 189, 218, 224, 209, 194, 207,
    207, 219, 227, 239, 223, 215, 253, 152,
    };

    tables[WPawn] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    234, 270, 278, 260, 182, 272, 286, 254,
    218, 172, 185, 127, 167, 96, 134, 165,
    125, 100, 88, 60, 46, 45, 73, 72,
    93, 68, 41, 52, 44, 41, 54, 54,
    82, 58, 44, 68, 54, 48, 36, 38,
    68, 69, 57, 30, 54, 51, 35, 36,
    0, 0, 0, 0, 0, 0, 0, 0,
    };

    for (int piece = 0; piece < NUM_PIECES; ++piece) {
        for (auto& sqr: tables[piece]) {
            sqr += pieceValsEg[piece];
        }
    }

    return tables;
}();

} // namespace eval