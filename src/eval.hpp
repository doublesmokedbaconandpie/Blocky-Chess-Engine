#pragma once

#include "move.hpp"
#include "types.hpp"

namespace Eval {

constexpr int totalPhase = 24;

class Info {
    public:
        Info() = default;
        int getRawEval(const PieceSets& pieceSets) const;
        void addPiece(Square square, pieceTypes piece);
        void removePiece(Square square, pieceTypes piece);

    private:
        int mopUpScore(const PieceSets& pieceSets, int score) const;

        int opScore = 0;
        int egScore = 0;
        int phase = 0;
};

template<bool IS_OPENING>
int getPlacementScore(Square square, pieceTypes currPiece);
int getPiecePhase(pieceTypes piece);

constexpr std::array<int, NUM_PIECES> pieceValsOp = {0, 722, 270, 334, 341, 58};
constexpr std::array<int, NUM_PIECES> pieceValsEg = {0, 862, 286, 307, 492, 125};

constexpr auto tablesOp = [] {
    std::array<std::array<int, BOARD_SIZE>, 6> tables{};

    tables[WKing] = {
    -9, 642, -23, -171, 462, -436, -349, 73,
    -474, -23, 166, 541, -347, -210, 201, 310,
    -261, 441, -92, 75, 122, -54, 105, -68,
    -314, -149, -72, -23, 30, -262, -291, -340,
    -207, -263, -102, -49, -194, -168, -190, -143,
    -197, -115, -146, -212, -323, -191, -85, -64,
    25, -180, 7, -92, -95, -92, 19, 74,
    27, 28, -4, -59, 40, -72, 88, 89,
    };

    tables[WQueen] = {
    368, 335, 290, 362, 417, 461, 487, 428,
    364, 339, 354, 382, 326, 501, 357, 439,
    352, 342, 368, 386, 421, 439, 417, 413,
    394, 368, 354, 374, 362, 372, 356, 358,
    383, 342, 355, 367, 350, 346, 369, 371,
    334, 378, 360, 367, 362, 362, 384, 406,
    336, 343, 379, 379, 384, 365, 377, 336,
    323, 294, 367, 374, 358, 240, 242, 309,
    };

    tables[WBishop] = {
    137, 152, 19, 9, 26, -25, -193, 76,
    109, 118, 83, 116, 64, 178, 123, 94,
    92, 139, 138, 141, 201, 268, 167, 168,
    79, 114, 143, 186, 140, 169, 102, 106,
    97, 102, 101, 140, 147, 109, 96, 103,
    99, 125, 109, 120, 103, 133, 119, 124,
    126, 108, 141, 95, 110, 55, 148, 103,
    16, 49, 80, 55, 17, 72, -122, -32,
    };

    tables[WKnight] = {
    -192, -109, -101, 97, 252, -73, -42, -296,
    -29, 31, 58, 105, 147, 184, -13, -14,
    6, 55, 52, 103, 167, 210, 84, 59,
    5, 31, 72, 75, 57, 105, 32, 94,
    -7, 32, 33, 17, 41, 46, 38, -13,
    -16, 5, 17, 36, 8, 18, 32, -31,
    -41, -50, -28, -2, 4, -28, 22, -0,
    -159, -19, -8, -51, -18, -24, -11, -44,
    };

    tables[WRook] = {
    103, 186, 215, 251, 226, 273, 224, 418,
    140, 142, 170, 198, 196, 288, 332, 258,
    133, 152, 161, 157, 192, 237, 275, 249,
    75, 106, 148, 153, 161, 157, 136, 109,
    41, 134, 89, 108, 133, 103, 166, 91,
    59, 55, 90, 68, 87, 95, 158, 77,
    24, 38, 105, 61, 79, 112, 68, 30,
    88, 96, 104, 110, 112, 106, 25, 91,
    };

    tables[WPawn] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    165, 166, 77, 158, 149, -9, -106, -88,
    -51, 38, 23, 70, 66, 116, 60, 29,
    -8, 10, -2, 32, 44, 33, 37, 9,
    -11, 20, -1, 16, 20, 14, 36, 21,
    -15, 19, -2, -2, 14, 0, 88, 50,
    -24, 8, -17, -18, 5, 44, 117, 30,
    0, 0, 0, 0, 0, 0, 0, 0,
    };

    for (int piece = 0; piece < NUM_PIECES; ++piece) {
        for (auto& sqr: tables[piece]) {
            sqr += pieceValsOp[piece];
        }
    }

    return tables;
}();

// Endgame tables

constexpr auto tablesEg = [] {
    std::array<std::array<int, BOARD_SIZE>, 6> tables{};

    tables[WKing] = {
    -247, -429, -66, -39, -292, 302, -32, -315,
    263, -5, -172, -299, 163, 82, 37, -3,
    122, -143, 52, -2, -9, 88, 13, 94,
    55, 88, 73, 32, 40, 144, 140, 152,
    43, 116, 61, 44, 105, 89, 113, 54,
    83, 45, 55, 94, 134, 107, 69, 31,
    -33, 79, 33, 56, 43, 44, 8, -26,
    -67, -19, -6, -23, -93, -4, -48, -79,
    };

    tables[WQueen] = {
    456, 602, 698, 632, 630, 573, 570, 632,
    505, 594, 602, 668, 720, 627, 705, 657,
    535, 565, 616, 608, 659, 729, 769, 655,
    454, 554, 592, 642, 712, 754, 718, 648,
    505, 571, 576, 622, 640, 625, 612, 544,
    499, 475, 546, 523, 559, 576, 534, 489,
    504, 542, 477, 479, 479, 453, 420, 463,
    439, 561, 478, 457, 477, 554, 379, 444,
    };

    tables[WBishop] = {
    160, 84, 184, 196, 157, 198, 162, 39,
    144, 145, 190, 154, 210, 136, 133, 169,
    169, 185, 186, 192, 129, 182, 157, 154,
    179, 204, 190, 176, 204, 147, 170, 167,
    101, 185, 207, 203, 174, 203, 178, 98,
    135, 142, 204, 188, 212, 173, 94, 118,
    86, 117, 99, 148, 166, 181, 136, -31,
    89, 139, 111, 134, 181, 101, 183, 136,
    };

    tables[WKnight] = {
    20, 104, 150, 35, -36, 123, 106, 118,
    60, 69, 68, 107, -25, 40, 73, 79,
    61, 99, 128, 115, 85, 59, 107, 47,
    96, 85, 134, 133, 148, 123, 133, 57,
    67, 52, 124, 134, 109, 123, 105, 59,
    -5, 78, 79, 104, 132, 95, 90, 30,
    38, 4, 111, 85, 87, 106, 77, 45,
    35, -30, 10, 51, 15, 46, -31, -46,
    };

    tables[WRook] = {
    322, 306, 300, 280, 293, 279, 290, 182,
    328, 332, 338, 322, 312, 282, 255, 276,
    300, 326, 318, 309, 304, 282, 257, 255,
    318, 306, 311, 305, 308, 314, 323, 289,
    303, 275, 311, 306, 269, 282, 222, 269,
    265, 287, 276, 300, 308, 293, 241, 260,
    258, 299, 279, 300, 272, 272, 279, 255,
    266, 278, 294, 299, 288, 278, 316, 205,
    };

    tables[WPawn] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    407, 434, 376, 284, 311, 316, 416, 437,
    248, 223, 220, 159, 178, 67, 203, 172,
    129, 100, 77, 45, 37, 23, 57, 56,
    84, 69, 31, 36, 33, 29, 38, 31,
    69, 58, 39, 46, 59, 48, 26, 13,
    62, 62, 52, 3, 41, 50, 17, -0,
    0, 0, 0, 0, 0, 0, 0, 0,
    };

    for (int piece = 0; piece < NUM_PIECES; ++piece) {
        for (auto& sqr: tables[piece]) {
            sqr += pieceValsEg[piece];
        }
    }

    return tables;
}();

} // namespace eval