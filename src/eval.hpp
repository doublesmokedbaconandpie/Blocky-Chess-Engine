#pragma once

#include "move.hpp"
#include "types.hpp"

namespace Eval {

constexpr int totalPhase = 24;

struct Info {
    Info() = default;
    int getRawEval(const PieceSets& pieceSets) const;
    void addPiece(Square square, pieceTypes piece);
    void removePiece(Square square, pieceTypes piece);

    int mopUpScore(const PieceSets& pieceSets, int score) const;

    int opScore = 0;
    int egScore = 0;
    int phase = 0;
};

int getPiecePhase(pieceTypes piece);
int getPlacementScoreOp(Square square, pieceTypes currPiece);
int getPlacementScoreEg(Square square, pieceTypes currPiece);

constexpr std::array<int, NUM_PIECES> pieceValsOp = {0, 725, 271, 334, 342, 58};
constexpr std::array<int, NUM_PIECES> pieceValsEg = {0, 860, 285, 307, 492, 125};

constexpr auto tablesOp = [] {
    std::array<std::array<int, BOARD_SIZE>, 6> tables{};

    tables[WKing] = {
    -18, 589, 27, -198, 455, -424, -355, 37,
    -464, 15, 158, 579, -356, -229, 211, 301,
    -275, 447, -101, 94, 81, -42, 101, -65,
    -299, -180, -83, -37, 23, -262, -293, -323,
    -212, -250, -109, -69, -201, -170, -190, -137,
    -189, -118, -144, -218, -318, -192, -83, -64,
    27, -178, 5, -91, -94, -91, 20, 75,
    28, 29, -3, -58, 41, -70, 89, 90,
    };

    tables[WQueen] = {
    367, 340, 291, 360, 420, 469, 486, 429,
    362, 337, 355, 379, 326, 505, 355, 443,
    354, 339, 369, 388, 419, 440, 417, 413,
    394, 369, 356, 373, 365, 370, 356, 359,
    384, 342, 355, 368, 351, 348, 368, 370,
    333, 378, 361, 367, 363, 363, 385, 406,
    338, 344, 379, 380, 385, 366, 374, 339,
    324, 293, 366, 375, 358, 240, 245, 306,
    };

    tables[WBishop] = {
    151, 158, 47, 19, 21, -9, -198, 55,
    103, 117, 84, 113, 59, 180, 125, 92,
    93, 139, 138, 142, 201, 273, 171, 168,
    79, 114, 142, 185, 139, 169, 101, 105,
    95, 102, 101, 142, 144, 108, 94, 102,
    99, 124, 108, 120, 103, 133, 117, 124,
    126, 107, 141, 95, 111, 55, 148, 103,
    25, 48, 80, 57, 17, 72, -124, -31,
    };

    tables[WKnight] = {
    -189, -118, -106, 80, 245, -52, -47, -286,
    -26, 29, 58, 104, 145, 181, -25, -14,
    12, 54, 49, 104, 170, 201, 85, 62,
    6, 32, 71, 77, 57, 108, 32, 95,
    -6, 39, 34, 17, 41, 47, 36, -12,
    -16, 6, 18, 37, 8, 18, 32, -32,
    -43, -49, -28, -2, 4, -29, 24, 1,
    -164, -18, -7, -51, -17, -25, -10, -43,
    };

    tables[WRook] = {
    102, 183, 218, 251, 226, 270, 223, 417,
    139, 143, 172, 200, 196, 290, 326, 260,
    132, 152, 163, 154, 191, 238, 275, 246,
    73, 105, 147, 154, 161, 158, 131, 114,
    40, 133, 87, 108, 133, 103, 165, 92,
    59, 57, 89, 66, 87, 95, 158, 77,
    25, 36, 104, 60, 77, 112, 70, 31,
    88, 96, 103, 109, 112, 106, 25, 91,
    };

    tables[WPawn] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    164, 165, 76, 157, 146, -6, -95, -87,
    -51, 37, 24, 70, 65, 114, 55, 27,
    -8, 9, -1, 32, 44, 33, 37, 10,
    -11, 20, -1, 16, 20, 14, 36, 21,
    -15, 20, -1, -2, 14, 0, 88, 50,
    -24, 8, -17, -17, 5, 44, 116, 30,
    0, 0, 0, 0, 0, 0, 0, 0,
    };

    for (int piece = 0; piece < NUM_PIECES; ++piece) {
        for (auto& sqr: tables[piece]) {
            sqr += pieceValsOp[piece];
        }
    }

    return tables;
}();

// Endgame tables

constexpr auto tablesEg = [] {
    std::array<std::array<int, BOARD_SIZE>, 6> tables{};

    tables[WKing] = {
    -256, -404, -94, -20, -290, 294, -33, -287,
    261, -23, -171, -316, 167, 89, 33, 0,
    130, -145, 56, -11, 6, 85, 11, 93,
    50, 99, 77, 39, 43, 143, 141, 147,
    46, 111, 64, 51, 107, 89, 113, 51,
    76, 48, 54, 95, 132, 107, 68, 31,
    -35, 78, 33, 55, 43, 44, 8, -26,
    -67, -20, -7, -22, -94, -4, -49, -79,
    };

    tables[WQueen] = {
    456, 601, 699, 634, 630, 567, 570, 632,
    507, 599, 601, 670, 716, 628, 697, 650,
    530, 565, 613, 607, 667, 729, 766, 654,
    459, 548, 591, 646, 707, 753, 716, 645,
    505, 570, 577, 622, 639, 616, 615, 547,
    501, 475, 543, 521, 557, 575, 532, 486,
    491, 537, 476, 476, 474, 449, 426, 462,
    443, 561, 484, 452, 478, 558, 373, 457,
    };

    tables[WBishop] = {
    148, 79, 178, 194, 158, 188, 164, 51,
    149, 145, 191, 155, 213, 134, 134, 173,
    166, 185, 187, 191, 128, 180, 156, 155,
    180, 204, 189, 176, 203, 146, 170, 168,
    103, 186, 206, 203, 175, 204, 178, 100,
    135, 141, 205, 188, 212, 173, 96, 115,
    86, 119, 99, 148, 166, 182, 136, -33,
    81, 140, 111, 133, 181, 101, 185, 134,
    };

    tables[WKnight] = {
    12, 104, 145, 40, -34, 113, 104, 123,
    60, 71, 70, 108, -25, 39, 80, 78,
    56, 101, 129, 114, 85, 63, 106, 45,
    96, 85, 135, 132, 148, 121, 134, 57,
    65, 47, 124, 133, 108, 123, 106, 60,
    -6, 77, 78, 104, 131, 95, 90, 29,
    45, 5, 111, 85, 86, 106, 72, 43,
    33, -31, 11, 52, 13, 46, -30, -47,
    };

    tables[WRook] = {
    322, 307, 299, 280, 293, 281, 289, 182,
    328, 331, 338, 321, 313, 281, 256, 275,
    301, 327, 317, 310, 305, 280, 255, 256,
    319, 305, 311, 304, 307, 315, 326, 288,
    303, 276, 312, 305, 268, 281, 223, 269,
    265, 286, 277, 301, 308, 292, 240, 261,
    256, 299, 279, 300, 273, 272, 276, 254,
    266, 277, 292, 299, 288, 278, 315, 204,
    };

    tables[WPawn] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    407, 434, 376, 284, 311, 315, 412, 437,
    248, 223, 219, 159, 178, 66, 205, 173,
    129, 100, 77, 46, 37, 23, 58, 56,
    84, 68, 31, 36, 33, 29, 39, 31,
    68, 58, 39, 46, 58, 48, 26, 13,
    62, 62, 52, 3, 42, 50, 17, -0,
    0, 0, 0, 0, 0, 0, 0, 0,
    };

    for (int piece = 0; piece < NUM_PIECES; ++piece) {
        for (auto& sqr: tables[piece]) {
            sqr += pieceValsEg[piece];
        }
    }

    return tables;
}();

} // namespace eval