#pragma once

#include "move.hpp"
#include "types.hpp"

namespace Eval {

constexpr int totalPhase = 24;

struct Info {
    Info() = default;
    int getRawEval() const;
    void addPiece(Square square, pieceTypes piece);
    void removePiece(Square square, pieceTypes piece);

    int opScore = 0;
    int egScore = 0;
    int phase = 0;
};

int getPiecePhase(pieceTypes piece);
int getPlacementScoreOp(Square square, pieceTypes currPiece);
int getPlacementScoreEg(Square square, pieceTypes currPiece);

constexpr std::array<int, NUM_PIECES> pieceValsOp = {0, 3313, 588, 555, 870, 115};
constexpr std::array<int, NUM_PIECES> pieceValsEg = {0, -567, 135, 163, 190, 125};

constexpr auto tablesOp = [] {
    std::array<std::array<int, BOARD_SIZE>, 6> tables{};

    tables[WKing] = {
    -185, -138, 84, 202, 416, 401, -430, 472,
    -206, -356, -345, -114, 936, -560, -489, 269,
    2, -349, -431, -115, -187, -235, -287, -130,
    -283, -140, -314, 40, -44, -29, -113, -90,
    57, -43, -263, 93, -33, -59, -61, -87,
    -59, -93, 12, -260, -208, -183, -7, 5,
    62, -215, -4, -110, -143, -162, -8, 110,
    -20, -8, -49, -231, 50, -117, 64, 52,
    };

    tables[WQueen] = {
    456, 565, 681, 543, 795, 794, 804, 827,
    564, 570, 608, 557, 563, 827, 604, 846,
    624, 579, 622, 619, 785, 786, 762, 746,
    644, 695, 603, 635, 645, 668, 624, 632,
    643, 650, 611, 638, 616, 607, 619, 589,
    571, 653, 656, 644, 625, 655, 648, 672,
    631, 629, 676, 653, 663, 666, 571, 733,
    540, 583, 634, 657, 609, 500, 386, 779,
    };

    tables[WBishop] = {
    192, 154, -6, -4, -62, -218, 88, -228,
    90, 92, 129, 162, 89, 144, 177, 174,
    132, 127, 149, 202, 163, 331, 302, 215,
    92, 123, 128, 197, 176, 211, 137, 112,
    142, 115, 103, 214, 157, 139, 84, 132,
    105, 75, 106, 118, 132, 124, 129, 106,
    121, 127, 164, 111, 113, 55, 177, 284,
    240, 24, 96, 42, 217, 77, 586, -369,
    };

    tables[WKnight] = {
    -358, -236, 59, 130, 128, -4, 65, -230,
    58, -5, 177, 181, 372, 367, -128, 190,
    120, 140, 152, 191, 330, 228, 107, 91,
    53, 141, 150, 192, 161, 217, 123, 138,
    92, 165, 129, 101, 106, 158, 78, 115,
    50, 88, 111, 146, 134, 121, 84, 56,
    41, 116, 96, 94, 93, -22, 250, 100,
    360, 57, 31, -21, 80, 94, 75, 23,
    };

    tables[WRook] = {
    -2, 193, 333, 232, 283, 318, 107, 256,
    124, 174, 129, 272, 204, 407, 291, 425,
    140, 288, 114, 165, 292, 199, 212, 219,
    77, 75, 100, 206, 113, 143, 77, 108,
    95, 100, 69, 158, 115, 48, 154, 104,
    122, 117, 113, 132, 85, 77, 185, 64,
    36, 56, 148, 2, 103, 126, -52, -65,
    76, 80, 94, 93, 96, 99, 103, 57,
    };

    tables[WPawn] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    533, 546, 290, 172, 320, 66, 9, 129,
    85, 79, 97, 55, 57, 164, 88, 83,
    26, -22, -3, 16, 41, -16, 64, -26,
    -42, -5, -18, 15, -7, 4, 28, -4,
    -54, 17, -11, -11, -11, -26, 120, 25,
    -62, -11, -38, -49, -30, 52, 147, -10,
    0, 0, 0, 0, 0, 0, 0, 0,
    };

    for (int piece = 0; piece < NUM_PIECES; ++piece) {
        for (auto& sqr: tables[piece]) {
            sqr += pieceValsOp[piece];
        }
    }

    return tables;
}();

// Endgame tables

constexpr auto tablesEg = [] {
    std::array<std::array<int, BOARD_SIZE>, 6> tables{};

    tables[WKing] = {
    124, 137, 111, -1, -61, -50, 103, 15,
    128, 176, 225, 169, -347, 217, 183, -141,
    41, 119, 208, 113, 155, 78, 121, 98,
    75, 90, 146, 83, 112, 114, 107, 82,
    -4, 39, 88, 59, 94, 90, 82, 68,
    -1, 39, 22, 121, 112, 117, 80, 45,
    -40, 108, 39, 55, 79, 94, 56, 5,
    -6, -8, 36, 34, -56, 31, 8, -10,
    };

    tables[WQueen] = {
    688, 597, 610, 689, 499, 491, 498, 560,
    517, 605, 601, 643, 644, 531, 578, 469,
    451, 589, 536, 596, 523, 528, 537, 479,
    494, 419, 503, 587, 570, 571, 545, 470,
    485, 418, 533, 582, 574, 485, 493, 528,
    514, 403, 347, 395, 452, 395, 419, 320,
    320, 452, 289, 345, 333, 319, 343, 289,
    375, 408, 452, 372, 441, 413, 354, 347,
    };

    tables[WBishop] = {
    117, 99, 124, 222, 200, 297, 189, 191,
    157, 182, 179, 157, 192, 167, 124, 163,
    140, 222, 172, 183, 123, 188, 155, 125,
    159, 202, 178, 151, 173, 114, 143, 153,
    82, 182, 164, 185, 146, 175, 177, 102,
    107, 121, 218, 187, 220, 144, 70, 111,
    70, 120, 87, 145, 147, 204, 87, 23,
    174, 117, 92, 84, 100, 88, -28, 183,
    };

    tables[WKnight] = {
    267, 207, 163, 54, 9, 59, 107, 205,
    33, 91, 80, 146, -161, 5, 139, -22,
    41, 122, 108, 120, 91, 83, 120, 14,
    119, 55, 120, 147, 118, 73, 127, 36,
    45, 74, 87, 139, 114, 117, 91, 29,
    -26, 38, 40, 78, 62, 58, 77, 64,
    73, 37, 60, 54, 31, 100, 35, 15,
    -102, -108, 11, 49, -42, -8, -52, -85,
    };

    tables[WRook] = {
    389, 296, 271, 298, 275, 278, 335, 252,
    339, 317, 380, 283, 325, 239, 290, 230,
    327, 279, 338, 306, 266, 286, 308, 280,
    331, 339, 339, 290, 328, 336, 325, 298,
    309, 324, 315, 270, 272, 310, 255, 304,
    224, 219, 264, 273, 292, 270, 215, 250,
    182, 203, 234, 307, 243, 278, 256, 265,
    272, 275, 293, 309, 292, 290, 290, 219,
    };

    tables[WPawn] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    176, 241, 224, 282, 254, 250, 262, 230,
    219, 186, 153, 121, 211, 46, 119, 141,
    120, 131, 78, 66, 45, 38, 49, 54,
    103, 83, 40, 49, 38, 44, 46, 33,
    112, 70, 53, 72, 83, 51, 29, 41,
    99, 86, 65, 8, 81, 61, 22, 42,
    0, 0, 0, 0, 0, 0, 0, 0,
    };

    for (int piece = 0; piece < NUM_PIECES; ++piece) {
        for (auto& sqr: tables[piece]) {
            sqr += pieceValsEg[piece];
        }
    }

    return tables;
}();

} // namespace eval